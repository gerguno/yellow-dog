import Head from 'next/head'
import Image from 'next/image'
import { createClient } from "next-sanity";
import { useEffect, useRef, useLayoutEffect } from 'react';
import { gsap } from "gsap/dist/gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";

export default function Home({ pets }) {
  const mainRef = useRef()
  const ulRef = useRef()
  console.log(pets)

  useLayoutEffect(() => {
    // create our context. This function is invoked immediately and all GSAP animations and ScrollTriggers created during the execution of this function get recorded so we can revert() them later (cleanup)
    let ctx = gsap.context(() => {
      gsap.to(ulRef.current, { opacity: 1 });
    }, mainRef); 
    
    return () => ctx.revert(); // cleanup
    
  }, []);

  useEffect(() => {
    // gsap.registerPlugin(ScrollTrigger); 

    // ScrollTrigger.config({ limitCallbacks: true });

    // gsap.utils.toArray(".lazy").forEach(image => {
      
    //   let newSRC = image.dataset.src,
    //       newImage = document.createElement("img"),
     
    //   loadImage = () => {
    //     newImage.onload = () => {
    //       newImage.onload = null; // avoid recursion
    //       newImage.src = image.src; // swap the src
    //       image.src = newSRC;
    //       // place the low-res version on TOP and then fade it out.
    //       gsap.set(newImage, {
    //         position: "absolute", 
    //         top: image.offsetTop, 
    //         left: image.offsetLeft, 
    //         width: image.offsetWidth, 
    //         height: image.offsetHeight
    //       });
    //       image.parentNode.appendChild(newImage);
    //       gsap.to(newImage, {
    //         opacity: 0, 
    //         onComplete: () => newImage.parentNode.removeChild(newImage)
    //       });
    //       st && st.kill();
    //     }
    //     newImage.src = newSRC;
    //   }, 
          
    //   st = ScrollTrigger.create({
    //     trigger: image,
    //     start: "-50% bottom",
    //     onEnter: loadImage,
    //     onEnterBack: loadImage // make sure it works in either direction
    //   });
    // });
    
  }, [])

  const imageLoader = ({ src, width, height }) => {
    return `${src}?w=${width}&h=${height}&auto=format&fit=crop&blur=1000`
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main ref={mainRef}>
        <ul ref={ulRef} style={{ opacity: 0 }}>
          {pets.map((pet, index) => (
              <li key={index}>
                <span>{pet.name} loves {pet.favFood}</span> <br/>
                <Image 
                  loader={imageLoader}
                  loading="lazy" 
                  src={`${pet.url}?w=500&h=500&dpr=2&auto=format&fit=crop`}
                  width={500} 
                  height={500} 
                  unoptimized={true}
                />
              </li>
          ))
          }
        </ul>
      </main>
    </>
  )
}

const client = createClient({
  projectId: "sjik838z",
  dataset: "production",
  apiVersion: "2022-03-25",
  useCdn: false
});

export async function getStaticProps() {
  const pets = await client.fetch(`*[_type == "pet"]{
    name, favFood,
    "url": photo.asset->url
  }`)
  return {
    props: {
      pets
    }
  };
}