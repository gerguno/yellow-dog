import Head from 'next/head'
import Image from 'next/image'
import { createClient } from "next-sanity";
import { useEffect, useRef, useLayoutEffect } from 'react';
import { gsap } from "gsap/dist/gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";

export default function Home({ pets }) {
  const mainRef = useRef()
  const ulRef = useRef()
  console.log(pets)

  // useLayoutEffect(() => {
  //   // create our context. This function is invoked immediately and all GSAP animations and ScrollTriggers created during the execution of this function get recorded so we can revert() them later (cleanup)
  //   let ctx = gsap.context(() => {
  //     gsap.to(ulRef.current, { opacity: 1 });
  //   }, mainRef); 
    
  //   return () => ctx.revert(); // cleanup
    
  // }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main ref={mainRef}>
        <ul ref={ulRef} 
          style={{ opacity: 1 }}
        >
          {pets.map((pet, index) => (
              <li key={index}>
                <span>{pet.name} loves {pet.favFood}</span> <br/>
                <Image 
                  alt={pet.name}
                  loading="lazy" 
                  placeholder="blur"
                  blurDataURL={pet.blurDataURL.metadata.lqip}
                  src={`${pet.url}?w=4000&h=4000&dpr=2&auto=format&fit=crop`}
                  width={500} 
                  height={500} 
                  unoptimized={true}
                />
              </li>
          ))
          }
        </ul>
      </main>
    </>
  )
}

const client = createClient({
  projectId: "sjik838z",
  dataset: "production",
  apiVersion: "2022-03-25",
  useCdn: false
});

export async function getStaticProps() {
  const pets = await client.fetch(`*[_type == "pet"]{
    name, 
    favFood, 
    "url": photo.asset->url,
    "blurDataURL": photo.asset->{
      metadata {
        lqip
      }
    }
  }`)
  return {
    props: {
      pets
    }
  };
}